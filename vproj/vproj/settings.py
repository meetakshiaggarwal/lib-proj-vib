"""
Django settings for vproj project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# print "base is " + BASE_DIR + "/templates/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'vr^e27)1umte%&fat4c$cnt-l8gz9iwsi!x$$vwzmq&=z6cuhr'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

GOOGLE_WHITE_LISTED_DOMAINS = ['google.com']

# Application definition

INSTALLED_APPS = (
    # django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'social.apps.django_app.default',
    # third party apps
    'crispy_forms',
    # my app
    'library',
    
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'vproj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [   os.path.join(BASE_DIR, 'templates'),
                    # BASE_DIR + "/templates/",
                    # '/home/vaibhav/DBMSproject/vProj/vproj/templates/',
                ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social.apps.django_app.context_processors.backends',
                'social.apps.django_app.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'vproj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, "static_in_pro", "static_root")

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static_in_pro", "our_static"),
    # '/var/www/static/',
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "static_in_pro", "media_root")

# crispy form template pack
CRISPY_TEMPLATE_PACK = 'bootstrap3'

# ADMIN_EMAILS = { 'vaibhav95aggarwal@gmail.com', 'letsread.iitbhu@gmail.com' }

# for google sign in

# These URLs are used on different steps of the auth process, some for successful results and others for error situations.
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/book/'
# Used to redirect the user once the auth process ended successfully. The value of ?next=/foo is used if it was present
SOCIAL_AUTH_LOGIN_ERROR_URL = '/'
# URL where the user will be redirected in case of an error
SOCIAL_AUTH_LOGIN_URL = '/'
# Is used as a fallback for LOGIN_ERROR_URL
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/author/'

# SOCIAL_AUTH_NEW_ASSOCIATION_REDIRECT_URL = '/new-association-redirect-url/'
# Like SOCIAL_AUTH_NEW_USER_REDIRECT_URL but for new associated accounts (user is already logged in). Used in place of SOCIAL_AUTH_LOGIN_REDIRECT_URL
# SOCIAL_AUTH_DISCONNECT_REDIRECT_URL = '/'
# The user will be redirected to this URL when a social account is disconnected
# SOCIAL_AUTH_INACTIVE_USER_URL = '/inactive-user/'
# Inactive users can be redirected to this URL when trying to authenticate.
# Successful URLs will default to SOCIAL_AUTH_LOGIN_URL while error URLs will fallback to SOCIAL_AUTH_LOGIN_ERROR_URL.

AUTHENTICATION_BACKENDS = (
  'social.backends.google.GoogleOAuth2',
  'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_PIPELINE = (
  # 'profiles.pipeline.user_details'
        # Get the information we can about the user and return it in a simple
        # format to create the user instance later. On some cases the details are
        # already part of the auth response from the provider, but sometimes this
        # could hit a provider API.
  'social.pipeline.social_auth.social_details',

  # Get the social uid from whichever service we're authing thru. The uid is
        # the unique identifier of the given user in the provider.
  'social.pipeline.social_auth.social_uid',

  # Verifies that the current auth process is valid within the current
        # project, this is were emails and domains whitelists are applied (if
        # defined).
  'social.pipeline.social_auth.auth_allowed',

  # Checks if the current social-account is already associated in the site.
  'social.pipeline.social_auth.social_user',

  # Make up a username for this person, appends a random string at the end if
  # there's any collision.
  'social.pipeline.user.get_username',

  # Send a validation email to the user to verify its email address.
        # Disabled by default.
  # 'social.pipeline.mail.mail_validation',

  # Associates the current social details with another user account with
        # a similar email address. Disabled by default.
  # 'social.pipeline.social_auth.associate_by_email',

  # Create a user account if we haven't found one yet.
  'social.pipeline.user.create_user',

  # Create the record that associated the social account with this user.
  'social.pipeline.social_auth.associate_user',

  # Populate the extra_data field in the social record with the values
  # specified by settings (and the default ones like access_token, etc).
  'social.pipeline.social_auth.load_extra_data',

  # Update the user record with any changed info from the auth service.
  'social.pipeline.user.user_details',
)

#Step 3
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = "12513579274-sthal2t6vlt6h7hu3rr04cpv2lu53g6o.apps.googleusercontent.com"
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = "SOVU372ZZo-WuCbYkVYhFEDa"

